{"version":3,"sources":["services/firebase.js","components/Header.js","components/Footer.js","pages/Home.js","pages/Todo.js","helpers/auth.js","pages/Signup.js","pages/Login.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","auth","db","database","Header","className","to","id","currentUser","Footer","HomePage","Component","Todolist","props","state","user","todo","currentItem","content","placeId","readError","writeError","loading","handleChange","bind","handleSubmit","delItem","myRef","React","createRef","uid","this","setState","ref","child","on","snapshot","forEach","snap","push","val","error","message","event","target","value","preventDefault","ref2","current","then","key","update","remove","onSubmit","placeholder","name","onChange","type","role","map","item","onClick","email","signOut","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","Signup","password","createUserWithEmailAndPassword","Login","googleSignIn","signInWithEmailAndPassword","autoComplete","PrivateRoute","component","authenticated","rest","render","pathname","from","location","PublicRoute","App","onAuthStateChanged","exact","path","Home","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.764aa066.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDGRS_ZU5f8txQdpWYyp1g_BlHlWTL3-4s\",\r\n    authDomain: \"to-do-list-with-react.firebaseapp.com\",\r\n    databaseURL: \"https://to-do-list-with-react.firebaseio.com\",\r\n    projectId: \"to-do-list-with-react\",\r\n    storageBucket: \"to-do-list-with-react.appspot.com\",\r\n    messagingSenderId: \"160539640419\",\r\n    appId: \"1:160539640419:web:1379e88b4a206a494bae56\",\r\n    measurementId: \"G-WLFGZXH1YV\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n  export const auth = firebase.auth;\r\n  export const db = firebase.database();\r\n\r\n ","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { auth } from '../services/firebase';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n      <nav className=\"navbar\">\r\n        <Link className=\"navbar-brand\" to=\"/\">Home</Link>\r\n        <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNavAltMarkup\">\r\n          {auth().currentUser\r\n            ? <div className=\"navbar-nav\">\r\n              <Link className=\"nav-item\" to=\"/todo\">My activities</Link>\r\n            </div>\r\n            : <div className=\"navbar-nav\">\r\n              <Link className=\"nav-item\" to=\"/login\">Sign In</Link>\r\n              <Link className=\"nav-item\" to=\"/signup\">Sign Up</Link>\r\n            </div>}\r\n        </div>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction Footer() {\r\n  return (\r\n    <footer className=\"pt-5\">\r\n      <div className=\"container text-center\">\r\n        <p>&copy; Cat 2020.</p>\r\n      </div>\r\n    </footer>\r\n  )\r\n}\r\n\r\nexport default Footer;","import React, { Component } from 'react';\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport { Link } from 'react-router-dom';\r\nimport './Home.css';\r\n\r\nexport default class HomePage extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"home\">\r\n       \r\n        <section>\r\n          <div className=\"jumbo\">\r\n            <Header></Header>\r\n            <div className=\"container\">\r\n              <h1 className=\"title\">My To do list</h1>\r\n              <p className=\"intro\">What would you do today?</p>\r\n              <div className=\"account\">\r\n                <Link className=\"btn\" to=\"/signup\">Create New Account</Link>\r\n                <Link className=\"btn\" to=\"/login\">Login to Your Account</Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n        <Footer></Footer>\r\n      </div>\r\n    )\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport Header from \"../components/Header\";\r\nimport { auth } from \"../services/firebase\";\r\nimport { db } from \"../services/firebase\";\r\nimport './Todo.css';\r\n\r\nexport default class Todolist extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: auth().currentUser,\r\n      todo: [],\r\n      currentItem:{\r\n        content: '',\r\n        placeId: ''},\r\n      readError: null,\r\n      writeError: null,\r\n      loading: false,\r\n      \r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.delItem = this.delItem.bind(this);\r\n    this.myRef = React.createRef();\r\n  }\r\n\r\n  async componentDidMount() {\r\n    var uid=this.state.user.uid;  \r\n    this.setState({ readError: null, loading: true });\r\n    /*update the database on every change of child of uid*/\r\n    try {\r\n      db.ref(\"todo\").child(uid).on(\"value\", snapshot => {\r\n        let todo = [];\r\n        snapshot.forEach((snap) => {\r\n          todo.push(snap.val());\r\n        }); \r\n        this.setState({ todo });\r\n        this.setState({ loading: false });\r\n      });\r\n    } catch (error) {\r\n      this.setState({ readError: error.message, loading: false });\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      currentItem:{content: event.target.value}\r\n    });\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    var uid=this.state.user.uid;\r\n    var ref2=db.ref(\"todo\");\r\n    this.setState({ writeError: null });\r\n    const chatArea = this.myRef.current;\r\n    /*push the content and update key to the database of the specific user*/\r\n    ref2.child(uid).push({\r\n        content: this.state.currentItem.content,\r\n      }).then((snapshot) => {\r\n            ref2.child(uid).child(snapshot.key).update({\"key\": snapshot.key})\r\n        .then(\r\n          this.setState({currentItem:{placeId:snapshot.key}}))\r\n        .then(\r\n          this.setState({currentItem:{content:''}}))\r\n      });\r\n     \r\n  }\r\n\r\n  delItem(key){\r\n    var uid=this.state.user.uid;\r\n    var ref2=db.ref(\"todo\"); \r\n    db.ref(`todo/${this.state.user.uid}/${key}`).remove();\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className='home'>\r\n        \r\n\r\n        <div className=\"jumbo\" ref={this.myRef}>\r\n          <Header />\r\n         \r\n          {/* todo area */}\r\n          <h1 className=\"title\">What would you do today?</h1>\r\n          <form onSubmit={this.handleSubmit} className=\"mx-3\">\r\n\r\n            <input \r\n\r\n              placeholder='Type activity' \r\n              className=\"inputAct\" \r\n              name=\"content\" \r\n              onChange={this.handleChange} \r\n              value={this.state.currentItem.content}>\r\n\r\n            </input>\r\n\r\n          {this.state.error ? <p className=\"text-danger\">{this.state.error}</p> : null}\r\n          <button type=\"submit\" className=\"btn-submit\">Send</button>\r\n\r\n           {/* loading indicator */}\r\n           {this.state.loading ? <div className=\"spinner-border text-success\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div> : \"\"}\r\n\r\n          </form>\r\n          <ul>\r\n          {this.state.todo.map(item => {\r\n            return <li key={item.key} className='item'>\r\n              {item.content}\r\n              <button className='del' onClick={()=>this.delItem(item.key)}>X</button>\r\n              <br />\r\n           \r\n            </li>\r\n          })}\r\n          </ul>\r\n        \r\n       \r\n        <div className=\"userName\">\r\n         <p>Login in as: <strong className=\"text-info\">{this.state.user.email}</strong></p>\r\n         <p><button className=\"signOutBtn\" onClick={() => auth().signOut()}>Logout</button></p>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import { auth } from \"../services/firebase\";\r\n\r\nexport function signup(email, password) {\r\n  return auth().createUserWithEmailAndPassword(email, password);\r\n}\r\n\r\nexport function signin(email, password) {\r\n  return auth().signInWithEmailAndPassword(email, password);\r\n}\r\n\r\nexport function signInWithGoogle() {\r\n  const provider = new auth.GoogleAuthProvider();\r\n  return auth().signInWithPopup(provider);\r\n}\r\n\r\n\r\nexport function logout() {\r\n  return auth().signOut();\r\n}","import React,{Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {signup} from '../helpers/auth';\r\nimport './Signup.css';\r\nimport './Login.css';\r\n\r\nclass Signup extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          error: null,\r\n          email: '',\r\n          password: '',\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n\r\n      handleChange(event){\r\n          this.setState({\r\n              [event.target.name]:event.target.value\r\n          })\r\n      }\r\n\r\n      async handleSubmit(event){\r\n          event.preventDefault();\r\n          this.setState({error:''});\r\n          try{\r\n              await signup(this.state.email,this.state.password);\r\n          }\r\n          catch(error){\r\n              this.setState({error:error.message})\r\n          }\r\n      }\r\n\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className='container2'>\r\n                <form className='form' onSubmit={this.handleSubmit}>\r\n                    <h1>\r\n                        Sign Up to\r\n                        <Link className='title2' to = '/'>My to do list</Link>\r\n                    </h1>\r\n                    <p>Fill in the form below to create an account</p>\r\n                    <div className='form-group'>\r\n                        <input \r\n                    placeholder=\"Email\" \r\n                    name=\"email\" \r\n                    type=\"email\" \r\n                    onChange={this.handleChange} \r\n                    value={this.state.email}>\r\n                        </input>\r\n                    </div>\r\n                    <div className='form-group'>\r\n                        <input \r\n                    placeholder=\"Password\" \r\n                    name=\"password\" \r\n                    onChange={this.handleChange} \r\n                    value={this.state.password} \r\n                    type=\"password\">\r\n\r\n                        </input>\r\n                    </div>\r\n                    <div>\r\n                        {this.state.error? <p>{this.state.error}</p>:null}\r\n                        <button className='signUpBtn' type='submit'>Sign Up</button>\r\n                    </div>\r\n                    <hr></hr>\r\n                    <p>Already have an account? <Link to='/login'>Login</Link></p>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Signup;","import React, { Component } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { signin, signInWithGoogle} from \"../helpers/auth\";\r\nimport './Login.css';\r\n\r\nexport default class Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      email: \"\",\r\n      password: \"\"\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.googleSignIn = this.googleSignIn.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.setState({ error: \"\" });\r\n    try {\r\n      await signin(this.state.email, this.state.password);\r\n    } catch (error) {\r\n      this.setState({ error: error.message });\r\n    }\r\n  }\r\n\r\n  async googleSignIn() {\r\n    try {\r\n      await signInWithGoogle();\r\n    } catch (error) {\r\n      this.setState({ error: error.message });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container2\">\r\n        <form\r\n          className=\"form\"\r\n          autoComplete=\"off\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <h1>\r\n            Login to \r\n            <Link className=\"title2\" to=\"/\">\r\n              My to do list\r\n            </Link>\r\n          </h1>\r\n          <p className=\"lead\">\r\n            Fill in the form below to login to your account.\r\n          </p>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              placeholder=\"Email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              onChange={this.handleChange}\r\n              value={this.state.email}\r\n            />\r\n          </div>\r\n          <div className=\"form-group\">\r\n            <input\r\n              className=\"form-control\"\r\n              placeholder=\"Password\"\r\n              name=\"password\"\r\n              onChange={this.handleChange}\r\n              value={this.state.password}\r\n              type=\"password\"\r\n            />\r\n          </div>\r\n            <div className='form-error'>         \r\n            {this.state.error ? (\r\n              <p className=\"text-danger\">{this.state.error}</p>\r\n            ) : null}\r\n            </div>\r\n            <div className=\"form-button\">\r\n            <button className=\"loginbtn\" type=\"submit\">Login</button>\r\n          <button className=\"loginbtn\" type=\"button\" onClick={this.googleSignIn}>\r\n            Sign in with Google\r\n          </button>\r\n           </div>   \r\n          <hr />\r\n          <p>\r\n            Don't have an account? <Link to=\"/signup\">Sign up</Link>\r\n          </p>\r\n        </form>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\nimport {\n  Route,\n  BrowserRouter as Router,\n  Switch,\n  Redirect\n} from \"react-router-dom\";\nimport Home from \"./pages/Home\";\nimport Todolist from \"./pages/Todo\";\nimport Signup from \"./pages/Signup\";\nimport Login from \"./pages/Login\";\nimport {auth} from \"./services/firebase\";\n\n\nfunction PrivateRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        authenticated === true ? (\n          <Component {...props} />\n        ) : (\n            <Redirect\n              to={{ pathname: \"/login\", state: { from: props.location } }}\n            />\n          )\n      }\n    />\n  );\n}\n\nfunction PublicRoute({ component: Component, authenticated, ...rest }) {\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        authenticated === false ? (\n          <Component {...props} />\n        ) : (\n            <Redirect to=\"/todo\" />\n          )\n      }\n    />\n  );\n}\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      authenticated: false,\n      loading: true\n    };\n  }\n\n  componentDidMount(){\n    auth().onAuthStateChanged(user => {\n      if (user) {\n          this.setState({\n          authenticated: true,\n          loading: false\n        });\n      } else {\n          this.setState({\n          authenticated: false,\n          loading: false\n        });\n      }\n    });\n  }\n\n  render() {\n    return this.state.loading === true ? (\n      <div className=\"spinner-border text-success\" role=\"status\">\n        <span className=\"sr-only\">Loading...</span>\n      </div>\n    ) : (\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <PrivateRoute\n              path=\"/todo\"\n              authenticated={this.state.authenticated}\n              component={Todolist}\n            />\n            <PublicRoute\n              path=\"/signup\"\n              authenticated={this.state.authenticated}\n              component={Signup}\n            />\n            <PublicRoute\n              path=\"/login\"\n              authenticated={this.state.authenticated}\n              component={Login}\n            />\n          </Switch>\n        </Router>\n      );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}